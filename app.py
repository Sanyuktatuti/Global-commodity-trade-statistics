import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import holoviews as hv
hv.extension('bokeh')
from holoviews import opts, dim
from bokeh.palettes import Viridis256
from matplotlib.colors import to_rgb, to_hex # Ensure this is loaded to display in Jupyter
from matplotlib import cm
from matplotlib.colors import to_hex, to_rgb
from bokeh.layouts import column
from bokeh.models import Div
import panel as pn
pn.extension()

"""st5442_Assignment4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12a--vpH89SdOcd2sHl6mGok-7kKR12nP
"""

# Read the dataset
url = "commodity_trade_statistics_data.csv"
df = pd.read_csv(url)

# Calculate the total trade value for each country
total_trade = df.groupby('country_or_area')['trade_usd'].sum().reset_index()

# Get the top 5 countries by total trade value
top_countries = total_trade.nlargest(5, 'trade_usd')['country_or_area']

# Filter the original DataFrame for these top countries
filtered_data = df[df['country_or_area'].isin(top_countries)]

# Prepare the data for the chord diagram
chord_data = filtered_data.groupby(['country_or_area', 'category', 'flow']).agg({'trade_usd': 'sum'}).reset_index()

# Clean up the category names for better presentation
chord_data['category'] = chord_data['category'].str.replace('_', ' ').str.title()

# Remove the "All Commodities" category from the chord_data
chord_data = chord_data[chord_data['category'] != 'All Commodities']

# Create a dropdown menu for selecting trade flow
flow_selector = pn.widgets.Select(name='Select Trade Flow', options=['Import', 'Export'])

# Function to create the chord diagram
def create_chord_diagram(flow):
    # Filter the data based on the selected flow
    filtered_chord_data = chord_data[chord_data['flow'].str.lower() == flow.lower()]

    # Debug: Check if filtered data is empty
    if filtered_chord_data.empty:
        return hv.Div("No data available for the selected trade flow.")

    # Create nodes and links for the chord diagram
    countries = filtered_chord_data['country_or_area'].unique()
    categories = filtered_chord_data['category'].unique()

    # Create a mapping for indices
    country_index = {country: i for i, country in enumerate(countries)}
    category_index = {category: len(countries) + i for i, category in enumerate(categories)}

    # Create links by aggregating trade values
    links = [(country_index[row['country_or_area']], category_index[row['category']], row['trade_usd'])
             for _, row in filtered_chord_data.iterrows()]

    # Create the nodes DataFrame
    nodes = pd.DataFrame({
        'index': list(country_index.values()) + list(category_index.values()),
        'name': list(country_index.keys()) + list(categories),
    })

    # Define colors for countries using the Viridis colormap
    viridis_cmap = cm.get_cmap("viridis", 256)
    colors_list = [to_hex(viridis_cmap(i / 255)) for i in range(256)]
    country_colors = {country: colors_list[i * 255 // len(countries)] for i, country in enumerate(countries)}

    # Apply the color mapping to nodes
    nodes['color'] = nodes['name'].apply(
        lambda x: country_colors[x] if x in country_colors else '#D3D3D3'  # Default color for categories
    )

    # Convert links to a DataFrame and add the corresponding color for each link based on the country
    links_df = pd.DataFrame(links, columns=['source', 'target', 'value'])
    links_df['color'] = links_df['source'].apply(lambda x: nodes.loc[x, 'color'])

    # Create the chord diagram
    chord = hv.Chord((links_df, hv.Dataset(nodes, 'index'))).select(value=(1, None))
    chord.opts(
        opts.Chord(edge_color='color',
                   labels='name',
                   node_color='color',
                   node_size=15,
                   width=1200, 
                   height=1200,
                   title=f'Top 5 Countries {flow.capitalize()}ing Category Trade Relationships')
    )

    return chord

# Create a Panel layout to display the title, dropdown, and the chord diagram
@pn.depends(flow=flow_selector.param.value)
def update_chord_diagram(flow):
    return create_chord_diagram(flow)

# Define a title with a larger font size
title = pn.pane.Markdown("<h1 style='text-align: center; font-size: 36pt;'>Visual Insights into Import and Export Activities of the Top Trading Countries (1988-2016)</h1>")

# Arrange the layout using pn.Column to stack title, dropdown, and diagram
layout = pn.Column(title, flow_selector, update_chord_diagram)

# Display the application directly in the notebook
#layout.servable()
#pn.serve(layout)

#this ran locally with "python app.py" at server "http://localhost:5080"
#pn.serve(layout, show=True, port=5080, address="localhost", title="Plastic Dashboard")

# This is for Render deployment
app = layout.servable()
